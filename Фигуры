class Rook(Piece):
    def char(self):
        return 'R'

    def can_move(self, board, row: int, col: int, row_1: int, col_1: int) -> bool:
        return row == row_1 or col == col_1

    def can_attack(self, board, row: int, col: int, row_1: int, col_1: int) -> bool:
        return self.can_move(board, row, col, row_1, col_1)


class Bishop(Piece):
    def char(self):
        return 'B'

    def can_move(self, board, row: int, col: int, row_1: int, col_1: int) -> bool:
        return abs(row - row_1) == abs(col - col_1)

    def can_attack(self, board, row: int, col: int, row_1: int, col_1: int) -> bool:
        return self.can_move(board, row, col, row_1, col_1)


class Queen(Piece):
    def char(self):
        return 'Q'

    def can_move(self, board, row: int, col: int, row_1: int, col_1: int) -> bool:
        return row == row_1 or col == col_1 or abs(row - row_1) == abs(col - col_1)

    def can_attack(self, board, row: int, col: int, row_1: int, col_1: int) -> bool:
        return self.can_move(board, row, col, row_1, col_1)


class King(Piece):
    def char(self):
        return 'K'

    def can_move(self, board, row: int, col: int, row_1: int, col_1: int) -> bool:
        return abs(row - row_1) <= 1 and abs(col - col_1) <= 1

    def can_attack(self, board, row: int, col: int, row_1: int, col_1: int) -> bool:
        return self.can_move(board, row, col, row_1, col_1)
        
        class Knight(Piece):
    def char(self):
        return 'N'

    def can_move(self, board, row: int, col: int, row_1: int, col_1: int) -> bool:
        return (abs(row - row_1) == 2 and abs(col - col_1) == 1) or (abs(row - row_1) == 1 and abs(col - col_1) == 2)

    def can_attack(self, board, row: int, col: int, row_1: int, col_1: int) -> bool:
        return self.can_move(board, row, col, row_1, col_1)


class Pawn(Piece):
    def char(self):
        return 'P'

    def can_move(self, board, row: int, col: int, row_1: int, col_1: int) -> bool:
        return (abs(row - row_1) == 1 and col == col_1) or (abs(row - row_1) == 1 and abs(col - col_1) == 1)

    def can_attack(self, board, row: int, col: int, row_1: int, col_1: int) -> bool:
        return self.can_move(board, row, col, row_1, col_1)
